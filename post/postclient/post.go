// Code generated by goctl. DO NOT EDIT.
// Source: post.proto

package postclient

import (
	"context"

	"go-zero-demo/post/post"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	BatchPostReq        = post.BatchPostReq
	BatchPostResp       = post.BatchPostResp
	CreatePostReq       = post.CreatePostReq
	CreatePostResp      = post.CreatePostResp
	DeletePostReq       = post.DeletePostReq
	DeletePostResp      = post.DeletePostResp
	GetPostReq          = post.GetPostReq
	GetPostResp         = post.GetPostResp
	GetUserPostListReq  = post.GetUserPostListReq
	GetUserPostListResp = post.GetUserPostListResp
	PostData            = post.PostData
	UpdatePostReq       = post.UpdatePostReq
	UpdatePostResp      = post.UpdatePostResp

	Post interface {
		// 发表推文
		CreatePost(ctx context.Context, in *CreatePostReq, opts ...grpc.CallOption) (*CreatePostResp, error)
		// 更新推文
		UpdatePost(ctx context.Context, in *UpdatePostReq, opts ...grpc.CallOption) (*UpdatePostResp, error)
		// 删除推文
		DeletePost(ctx context.Context, in *DeletePostReq, opts ...grpc.CallOption) (*DeletePostReq, error)
		// 获取单条推文
		GetPost(ctx context.Context, in *GetPostReq, opts ...grpc.CallOption) (*GetPostResp, error)
		// 批量获取推文
		BatchPost(ctx context.Context, in *BatchPostReq, opts ...grpc.CallOption) (*BatchPostResp, error)
		// 用户用户推文列表
		GetUserPostList(ctx context.Context, in *GetUserPostListReq, opts ...grpc.CallOption) (*GetUserPostListResp, error)
	}

	defaultPost struct {
		cli zrpc.Client
	}
)

func NewPost(cli zrpc.Client) Post {
	return &defaultPost{
		cli: cli,
	}
}

// 发表推文
func (m *defaultPost) CreatePost(ctx context.Context, in *CreatePostReq, opts ...grpc.CallOption) (*CreatePostResp, error) {
	client := post.NewPostClient(m.cli.Conn())
	return client.CreatePost(ctx, in, opts...)
}

// 更新推文
func (m *defaultPost) UpdatePost(ctx context.Context, in *UpdatePostReq, opts ...grpc.CallOption) (*UpdatePostResp, error) {
	client := post.NewPostClient(m.cli.Conn())
	return client.UpdatePost(ctx, in, opts...)
}

// 删除推文
func (m *defaultPost) DeletePost(ctx context.Context, in *DeletePostReq, opts ...grpc.CallOption) (*DeletePostReq, error) {
	client := post.NewPostClient(m.cli.Conn())
	return client.DeletePost(ctx, in, opts...)
}

// 获取单条推文
func (m *defaultPost) GetPost(ctx context.Context, in *GetPostReq, opts ...grpc.CallOption) (*GetPostResp, error) {
	client := post.NewPostClient(m.cli.Conn())
	return client.GetPost(ctx, in, opts...)
}

// 批量获取推文
func (m *defaultPost) BatchPost(ctx context.Context, in *BatchPostReq, opts ...grpc.CallOption) (*BatchPostResp, error) {
	client := post.NewPostClient(m.cli.Conn())
	return client.BatchPost(ctx, in, opts...)
}

// 用户用户推文列表
func (m *defaultPost) GetUserPostList(ctx context.Context, in *GetUserPostListReq, opts ...grpc.CallOption) (*GetUserPostListResp, error) {
	client := post.NewPostClient(m.cli.Conn())
	return client.GetUserPostList(ctx, in, opts...)
}
